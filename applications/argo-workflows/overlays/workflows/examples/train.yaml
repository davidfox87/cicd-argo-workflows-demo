apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: input-artifact-s3-
  namespace: workflows
spec:
  entrypoint: train-workflow
  serviceAccountName: workflow
  volumeClaimTemplates:
  - metadata:
      name: workspace
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 0.5Gi
  templates:
  - name: train-workflow
    dag:
      tasks:
      - name: preprocess
        template: preprocess

      - name: train
        dependencies: [preprocess]
        template: train
        arguments:
          parameters: [{name: model_path, value: models/model.pkl}]
          artifacts:
            - name: data
              from: "{{tasks.preprocess.outputs.artifacts.output}}"
      - name: serve
        dependencies: [train]
        template: seldon-serve

      # - name: print-model-uri
      #   dependencies: [train]
      #   template: print-model-uri


  - name: preprocess
    outputs:
      artifacts:
      - name: output
        path: /tmp/data.csv
    container:
      name: preprocess
      image: foxy7887/xgb_train:v16
      command: ["python3", "./run_preprocess.py"]

  - name: train
    inputs:
      parameters:
      - name: model_path
      artifacts:
      - name: data
        path: /tmp/data.csv
    container:
      name: train
      image: foxy7887/xgb_train:v17
      command: ["python3", "./run_train.py"]
      args: ["--model_file", "{{inputs.parameters.model_path}}", "--bucket", "my-bucket"]
      volumeMounts:
      - name: workspace
        mountPath: /tmp
  - name: seldon-serve
    resource:                   #indicates that this is a resource template
      action: apply             #can be any kubectl action (e.g. create, delete, apply, patch)
      manifest: |   #put your kubernetes spec here
        apiVersion: "machinelearning.seldon.io/v1alpha2"
        kind: "SeldonDeployment"
        metadata:
          name: seldon-model
        spec:
          name: test-deployment
          predictors:
          - componentSpecs:
            - spec:
                containers:
                - name: wine-clf
                  image: foxy7887/wine-model:v1  
                  volumeMounts:
                  - name: mypvc
                    mountPath: /tmp
                volumes:
                - name: persistent-storage
                  persistentVolumeClaim:
                    claimName: "{{workflow.name}}-my-pvc"
            graph:
              children: []
              endpoint:
                type: REST
              name: classifier
              type: MODEL
            name: wine-clf
            replicas: 1

  # - name: print-model-uri
  #   container:
  #     image: alpine:latest
  #     command: [sh, -c]
  #     args: ["ls /tmp"]

