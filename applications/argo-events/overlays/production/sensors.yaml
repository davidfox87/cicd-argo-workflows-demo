
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
spec:
  template:
    container:
      volumeMounts:
        - mountPath: /git/task-tracker-app
          name: task-tracker-app
        - mountPath: /secret
          name: sshkey
        - mountPath: /etc/ssh
          name: known-hosts
    volumes:
      - name: task-tracker-app
        emptyDir: {}
      - name: sshkey
        secret:
          secretName: git-ssh
      # The name of the key in the secret must be "ssh_known_hosts"
      # Make sure you have your git provider added in the known hosts
      # e.g. create the secret by running, kubectl -n argo-events create secret generic git-known-hosts --from-file=ssh_known_hosts=.ssh/known_hosts
      - name: known-hosts
        secret:
          secretName: git-known-hosts
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      eventSourceName: github
      eventName: test
  triggers:
    - template:
        name: workflow-trigger-2
        k8s:
          operation: create
          source:
            git:
              url: "git@github.com:davidfox87/task-tracker.git"
              cloneDirectory: "/git/task-tracker-app"
              sshKeySecret:
                name: git-ssh
                key: key # ssh private key
              filePath: "frontend/Dockerfile"
              branch: "main"
          


---  
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: unit-test
      eventSourceName: github-webhook
      eventName: task-tracker
  triggers:
    - template:
        name: github-workflow-trigger
        argoWorkflow:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: clone-
                namespace: workflows # invoke workflow in argo namespace where workflows service account lives
              spec:
                entrypoint: unit-test
                serviceAccountName: workflow
                volumes:
                - name: regcred
                  secret:
                    secretName: regcred
                    items:
                      - key: .dockerconfigjson
                        path: config.json
                templates:
                - name: unit-test
                  inputs:
                    artifacts:
                    - name: source
                      path: /src
                      git:
                        repo: "git@github.com:davidfox87/task-tracker.git"
                        sshPrivateKeySecret: 
                          name: git-ssh
                          key: key
                        branch: "main"
                  container:
                    image: golang:1.10
                    command: [sh, -c]
                    args: ["git status && ls"]
                    workingDir: /src
                
---

apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: build-webhook
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      eventSourceName: github
      eventName: task-tracker
  triggers:
    - template:
        name: github-workflow-trigger
        argoWorkflow:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: build-
                namespace: workflows # invoke workflow in argo namespace where workflows service account lives
              spec:
                entrypoint: build
                serviceAccountName: workflow
                volumes:
                - name: regcred
                  secret:
                    secretName: regcred
                    items:
                      - key: .dockerconfigjson
                        path: config.json
                - name: github-access
                  secret:
                    secretName: github-access
                    items:
                      - key: token
                        path: token
                - name: sshkey
                  secret:
                    secretName: git-ssh
                  # e.g. create the secret by running, kubectl -n argo-events create secret generic git-known-hosts --from-file=ssh_known_hosts=.ssh/known_hosts
                - name: known-hosts
                  secret:
                    secretName: git-known-hosts
                templates:
                - name: build
                  dag:
                    tasks:
                    - name: build
                      templateRef:
                        name: container-image
                        template: build-kaniko-git
                        clusterScope: true
                      arguments:
                        parameters:
                        - name: repo_url
                          value: ""
                        - name: repo_ref
                          value: ""
                        - name: repo_commit_id
                          value: ""
                        - name: container_image
                          value: foxy7887/
                        - name: container_tag
                          value: ""
                        - name: subfolder
                          value: frontend
                    - name: promote-staging
                      templateRef:
                        name: promote
                        template: promote
                        clusterScope: true
                      arguments:
                        parameters:
                        - name: subfolder
                          value: applications/task-tracker-app/overlays/staging
                        - name: repo_owner
                          value: davidfox87
                        - name: repo_name
                          value: terraform-eks-acm-alb-istio
                        - name: image_owner
                          value: foxy7887
                        - name: image_name
                          value: ""
                        - name: tag
                          value: ""
                      dependencies: 
                      - build
                    - name: delay
                      template: delay
                    - name: test-functional
                      template: test
                      dependencies: 
                      - promote-staging
                    - name: test-integration
                      template: test
                      dependencies: 
                      - promote-staging
                    - name: promote-production
                      template: test
                      dependencies: 
                      - test-functional 
                      - test-integration
                - name: test
                  script:
                    image: alpine
                    command: [sh]
                    source: |
                      echo This is a testing simulation...
                      sleep 5
                    volumeMounts:
                    - name: github-access
                      mountPath: /.github/
                - name: delay
                  suspend:
                    duration: "20"
          parameters:
          - src:
              dependencyName: test-dep
              dataKey: body.repository.git_url
            dest: spec.templates.0.dag.tasks.0.arguments.parameters.0.value
          - src:
              dependencyName: test-dep
              dataKey: body.ref
            dest: spec.templates.0.dag.tasks.0.arguments.parameters.1.value
          - src:
              dependencyName: test-dep
              dataKey: body.after
            dest: spec.templates.0.dag.tasks.0.arguments.parameters.2.value
          - src:
              dependencyName: test-dep
              dataKey: body.repository.name
            dest: spec.templates.0.dag.tasks.0.arguments.parameters.3.value
            operation: append
          - src:
              dependencyName: test-dep
              dataKey: body.after
            dest: spec.templates.0.dag.tasks.0.arguments.parameters.4.value
          - src:
              dependencyName: test-dep
              dataKey: body.repository.name
            dest: spec.templates.0.dag.tasks.1.arguments.parameters.4.value
          - src:
              dependencyName: test-dep
              dataKey: body.after
            dest: spec.templates.0.dag.tasks.1.arguments.parameters.5.value